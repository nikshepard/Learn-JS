//  Lesson-16 Escaping sequences

/*
    Мы хотим показать диалог Матери Драконов со своим ребёнком:
    - Are you hungry?
    - Aaaarrrgh!

    Если вывести на экран строку с таким текстом:

    console.log('- Are you hungry?- Aaaarrrgh!'); //- Are you hungry?- Aaaarrrgh!

    Не то, что мы хотели. Строки расположены друг за другом, а не одна ниже другой. 
    Нам нужно как-то сказать интерпретатору «нажать на энтер» — сделать перевод строки после вопросительного знака. 
    Это можно сделать, используя символ перевода строки: \n.

    console.log('- Are you hungry?\n- Aaaarrrgh!'); 
    //- Are you hungry?
    //- Aaaarrrgh!

    \n — это специальный символ. В литературе его часто обозначают как LF (Line Feed). 
    Возможно вы сейчас подумали, что это опечатка, ведь здесь мы видим два символа \ и n, но это не так. 
    С точки зрения компьютера — это один невидимый символ перевода строки. Доказательство - ниже код, который возвращает длину строки

    'a'.length;    // 1
    '\n'.length;   // 1 !!!
    '\n\n'.length; // 2 !!!

    Почему так сделано? \n — всего лишь способ записать символ перевода строки, но сам перевод строки по своему смыслу – это один символ, правда, невидимый. 
    Именно поэтому и возникла такая задача. Нужно было как-то представить его на клавиатуре. 
    А поскольку количество знаков на клавиатуре ограничено и отдано под самые важные, то все специальные символы реализуются в виде таких обозначений.
    Символ перевода строки не является чем-то специфичным для программирования. Все, кто хоть раз печатал на компьютере, использовал перевод строки, нажимая на Enter. 
*/

//  Задание - Напишите программу, используея только один console.log(), следующие строки:
//  - Did Joffrey agree?
//  - He did. He also said "I love using \n".

console.log('- Did Joffrey agree?\n- He did. He also said "I love using \\n".') 

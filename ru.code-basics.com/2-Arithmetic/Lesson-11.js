//  Lesson-11 Floating point numbers

/* 
    JavaScript не делает различий между рациональными (0.5) и натуральными числами (10), для него и то, и другое - числа (в других языках это не так). 
    Благодаря этому их можно использовать совместно в любых операциях:

    3 * 0.5; // 1.5

    Но как бы от нас не скрывали, рациональные числа, в силу своих особенностей, устроены совсем по-другому. 
    Нам, как прикладным программистам, это было бы не особенно важно, если бы не одна деталь. Посмотрите на этот пример:

    0.2 * 0.2 // 0.04000000000000001

    Операция умножения двух рациональных чисел внезапно привела к неточному вычислению результата. Тот же самый результат выдадут и другие языки программирования. 
    Такое поведение обуславливается ограничениями вычислительных мощностей. Объем памяти, в отличие от чисел, конечен. 
    И если с натуральными числами эта проблема решается ограничением по верхней границе (есть некоторое максимальное число, которое можно ввести), то с рациональными так не пройдет.

    console.log(Number.MAX_SAFE_INTEGER); // 9007199254740991 - Максимальное возможное целое число

    Рациональные числа не выстроены в непрерывную цепочку, между 0.1 и 0.2 бесконечное множество чисел.
    Соответственно возникает серьезная проблема, а как хранить рациональные числа? Это интересный вопрос сам по себе. 
    В интернете множество статей, посвященных организации памяти в таких случаях. 
    Более того, существует стандарт, в котором описано, как это делать правильно, и подавляющее число языков на него опирается.
*/

//  Задание - Вычислите и выведите на экран произведение следующих чисел: 
//  0.39 и 0.22

console.log(0.39 * 0.22);
